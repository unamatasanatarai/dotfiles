#!/usr/bin/env bash

set -euo pipefail

. "$(dirname "$0")/stow/bin/.lib"

# -----------------------------------------------------------------------------
# Global variables
# -----------------------------------------------------------------------------

CONFIGS=stow

# -----------------------------------------------------------------------------
# Dependency checks
# -----------------------------------------------------------------------------

function check_deps() {
  local deps=(stow cp rm ls)
  for dep in "${deps[@]}"; do
    if ! command -v "$dep" >/dev/null 2>&1; then
      efail "Required command '$dep' is missing. Please install it first."
    fi
  done
}

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _remove_default_dotfiles {
  stow -Dt "$CONFIGS"
  eok "Unstowed previous stow"

  einfo "Removing default ~/ configurations ..."
  local files
  IFS=$'\n' read -rd '' -a files < <(ls -A "$CONFIGS" && printf '\0')
  for location in "${files[@]}"; do
    if [[ "$location" != ".config" ]]; then
      rm -rf ~/"$location"
    fi
  done
  eok "done: Removing default ~/ configurations ..."

  einfo "Removing default ~/.config configurations ..."
  IFS=$'\n' read -rd '' -a files < <(ls -A "$CONFIGS/.config" && printf '\0')
  for location in "${files[@]}"; do
    rm -rf "$HOME/.config/$location"
  done
  eok "done: Removing default ~/.config configurations ..."
}

# -----------------------------------------------------------------------------
# Define your tasks below
# -----------------------------------------------------------------------------

function dotfiles { # Purge configs and reinstall dotfiles
  ebox "!!! LAST CHANCE !!!"
  echo "Your spotlight_commands will be deleted"
  echo "<ctrl>+c to cancel this operation"
  echo "Or type AGREE to continue"
  read -r agree
  if [[ "$agree" == "AGREE" ]]; then
    _remove_default_dotfiles
    restow
  else
    efail "Aborting..."
  fi
}

function restow { # Update dotfiles
  ebox "Installing dotfiles"
  stow -Rt ~ "$CONFIGS"
  eok "Installed dotfiles"
}

function apps { # Install brew casks and formulas
  ./osx/apps
  ./osx/start-apps
}

function defaults { # Set sensible macos defaults
  ./osx/defaults
}

function fonts { # Install fonts with sudo prompt
  ebox "Install fonts"
  if [[ $EUID -ne 0 ]]; then
    echo "Installing fonts requires sudo privileges."
    sudo cp ./fonts/source-code-pro/*.ttf /Library/Fonts/
  else
    cp ./fonts/source-code-pro/*.ttf /Library/Fonts/
  fi
  eok "Fonts installed"
}

function neovim { # Install neovim tools
  ./osx/nvim
}

function stop-processes { # Stop or `install stop-processes --unload` processes
  ./osx/stop-processes "$@"
}

function env { # Setup the environment, create important directories
  ./osx/env
}

function update { # Update the important bits after git-pull
  defaults
  restow
  apps
}

function fresh { # Do everything at once. Please run this only once ;)
  ebox "Let's setup a fresh environment, shall we!"

  # the order matters
  defaults
  apps
  dotfiles
  fonts
  stop-processes --unload
}

# -----------------------------------------------------------------------------
# Help function

function help { # Display this helpful help information
  local functions
  functions=$(grep -E "^function [^_]*?$" "$0" | sed -E "s/ *{ *# */#/g" | sed -E "s/^function /   /g" | sort )
  echo "Usage: $0 <task> [args]"
  echo ""
  echo "Tasks:"
  echo "$functions" | column -t -s '#'
  echo ""
}

# -----------------------------------------------------------------------------
# Check dependencies before doing anything
check_deps

# -----------------------------------------------------------------------------
# Execute task or show help

"${@:-help}"
