#!/usr/bin/env bash

set -euo pipefail

VERSION="0.2"
__FILE=$(basename "$0")
__DIR=$(dirname "$0")

. "$__DIR"/.lib

# ------------------------------------------------------------
# DEFAULTS
# ------------------------------------------------------------

o_action="append"
filename="TODO.md"
header="TODO
====
"
project_root=$(git rev-parse --show-toplevel 2> /dev/null)
filepath="${project_root}/${filename}"

# ------------------------------------------------------------
# PUBLIC INTERFACES
# ------------------------------------------------------------

__args=()
function main {
  parseOptions "$@"

  case $o_action in

    "find")
      findTodos
      exit
      ;;

    "collect")
      collectTodos
      exit
      ;;

    "open")
      nvim "$filepath"
      exit
      ;;

    "append")
      append "$filepath" "${__args[*]}"
      exit
      ;;

    *)
      help
      ;;

  esac
}

function parseOptions {
  if [[ $# -eq 0 ]]; then
    o_action="open"
  fi

  while [[ $# -ge 1 ]]; do
    case $1 in

      -h | --help)
        help
        exit 2
        ;;

      -V | --version)
        _version
        exit
        ;;

      --collect)
        o_action="collect"
        shift
        continue
        ;;

      --find)
        o_action="find"
        shift
        continue
        ;;

      --file)
        shift
        if [ $# -eq 0 ]; then
          help
          exit 2
        fi
        filepath="$1"
        if [ $# -eq 1 ]; then
          o_action="open"
        fi
        shift
        continue
        ;;

    esac

    # throws exit 1 if trying to shift non existing crap
    if [[ $# -gt 0 ]]; then
      __args+=("$1")
      shift
    fi
  done
}

# it will exit 1 if nothing found. it is good
function findTodos {
  todos=$(rg -i --line-number --no-heading -g'!.git' -g"!$filename" "#\s*todo:")

  for todo in "${todos[@]}"; do
    echo "$todo"
  done
}

function collectTodos {
  local total
  total=0
  mapfile -t list < <(findTodos)
  for t in "${list[@]}"; do
    if ! grep -s "$t" "$filepath" 1> /dev/null; then
      _append "$filepath" "$t"
      total=$((total + 1))
    fi
  done
  eok "Added $total new todos to $filepath"
}

function append {
  local path duplicate msg
  duplicate=""
  path="$1"
  shift
  msg="$*"
  if grep -sq "$msg" "$filepath" 1> /dev/null; then
    duplicate="duplicate task "
  fi
  _append "$path" "$msg"
  eok "Added ${duplicate}to $path"
}

function _append {
  local msg path
  path="$1"
  shift
  msg="$*"
  makeHeader "$path"
  echo "- [ ] $msg" >> "$path"
}

function makeHeader {
  local path
  path=$1
  if [ ! -f "$path" ]; then
    mkdir -p "$(dirname "$path")"
    echo "$header" > "$path"
  fi
}
# ------------------------------------------------------------
# INTERNALS
# ------------------------------------------------------------

function _helpOptions {
  # use `#` to separate arg from descriptin
  local options
  options="
    --file         # the path to the todo file
    --find         # list out all the todo's in directory
    --collect      # put found todo's (--find) into $filename
    --help         # what you are reading now
  "
  echo "$options" | column -s "#" -t | sed 's/^ */    /'
}

function _version {
  echo "${__FILE}, version ${VERSION}"
}

function help {
  _version
  echo "Usage: $__FILE [--file=path_to_todo_file] [text ...]

Options:
$(_helpOptions)

Examples:

  Git project
  -----------

  If you run the command inside a git project folder tree,
  it will be assumed you want to append to project_root/$filename

  Open $filename

      $ todo

  Add a todo

      $ todo Lorem ipsum dolor sit amet
      $ todo \"Lorem ipsum dolor sit amet\"

  Global todo
  -----------

  If you specify options, the todo will work on the specified filepath.

  Open the todo

      $ todo --file ~/Documents/project/todo.md

  Append a todo

      $ todo --file ~/Documents/project/todo.md Lorem ipsum dolor sit amet
      $ todo --file ~/Documents/project/todo.md \"Lorem ipsum dolor sit amet \$(date)\"
"
}

# ------------------------------------------------------------
# MAIN
# ------------------------------------------------------------

main "$@"
