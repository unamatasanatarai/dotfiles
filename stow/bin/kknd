#!/usr/bin/env bash

set -euo pipefail

# -----------------------------------------------------------------------------
# SETUP
# -----------------------------------------------------------------------------

declare -r __VERSION="0.0.1"
__FILE="${0##*/}"
__DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
declare -r __FILE __DIR

# -----------------------------------------------------------------------------
# HELPERS
# -----------------------------------------------------------------------------

require() {
  local cmd="$1"
  command -v "$cmd" >/dev/null || {
    echo "Error: '$cmd' command not found. Please install it first." >&2
    exit 1
  }
}

log() {
  echo "[INFO] $*"
}

# -----------------------------------------------------------------------------
# CONFIG
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# PUBLIC interfaces
# -----------------------------------------------------------------------------

trash() { # Empty the trash
  require sqlite3

  log "Removing Trash directories..."
  sudo rm -rfv /Volumes/*/.Trashes || true
  sudo rm -rfv ~/.Trash || true
  sudo rm -rfv /private/var/log/asl/*.asl || true

  log "Clearing quarantine events..."
  sqlite3 ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV* 'delete from LSQuarantineEvent'
  log "Trash and quarantine cleared."
}

printer-history() { # Forget the printer queue from /var/spool/cups
  require cancel

  log "Canceling all print jobs..."
  cancel -x -a
  log "Purged /var/spool/cups"
}

screenshots() { # Empty the ~/Pictures/screenshots folder
  local sdir="${HOME}/Pictures/screenshots"
  if [[ -d "$sdir" ]]; then
    log "Removing all files from ${sdir}..."
    rm -rvf "${sdir:?}"/*
  else
    log "Screenshots directory not found: ${sdir}"
  fi
}

dstore() { # Remove .DS_Store files, recursively
  require find

  log "Finding and deleting .DS_Store files..."
  find . -name '.DS_Store' -type f -delete -print
}

# -----------------------------------------------------------------------------

help() { # Display this helpful help information
  local functions=""
  while IFS= read -r f; do
    if [[ $f =~ ([a-zA-Z][a-zA-Z0-9_-]*)[[:space:]]*\(\)[[:space:]]*{([[:space:]]*#[[:space:]]*)?(.*) ]]; then
      local sub="${BASH_REMATCH[1]}"
      local hel=${BASH_REMATCH[3]}
      functions+="   ${sub}#${hel}"$'\n'
    fi
  done < <(grep -E "^[a-zA-Z][a-zA-Z0-9_-]*?\s*\(\)\s*\{" "$0")
  echo "$__FILE v$__VERSION"
  echo "Usage: $__FILE <task>"
  echo ""
  echo "Tasks"
  column -t -s '#' <<< "$functions"
  echo ""
}

"${@:-help}"

