#!/usr/bin/env bash

set -euo pipefail

# Define working directories
dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly dir
readonly result="${dir}/bashrc"
readonly src_dir="${dir}/src"

# Files that must be processed first
readonly firstfiles=(_top _vars xdg path)

# Helper: Check if a file is in the firstfiles list
is_firstfile() {
    local name="$1"
    for i in "${firstfiles[@]}"; do
        [[ "$i" == "$name" ]] && return 0
    done
    return 1
}

# Helper: Append a file with a header
append_file() {
    local filepath="$1"
    local filename
    filename="$(basename "$filepath")"

    if [[ ! -r "$filepath" ]]; then
        echo "ERROR: Cannot read file ${filepath}" >&2
        return 1
    fi

    {
        echo ""
        echo "# ----- ${filename}"
        echo ""
        cat "$filepath"
    } >> "$result"
}

# Clean swap files
clean_swap_files() {
    echo "Cleaning swap files..." >&2
    find "$src_dir" -type f -name '.*.swp' -delete -o -name '*~' -delete
    if [[ $? -eq 0 ]]; then
        echo "Swap files cleaned successfully" >&2
    else
        echo "ERROR: Failed to clean swap files" >&2
        return 1
    fi
}

# Main processing
main() {
    # Verify source directory exists
    if [[ ! -d "$src_dir" ]]; then
        echo "ERROR: Source directory ${src_dir} does not exist" >&2
        exit 1
    fi

    # Clean swap files
    clean_swap_files || {
        echo "ERROR: Swap file cleaning failed" >&2
        exit 1
    }

    # Initialize result file
    echo "Initializing result file: ${result}" >&2
    : > "$result" || {
        echo "ERROR: Cannot initialize result file ${result}" >&2
        exit 1
    }

    # Append firstfiles in order
    echo "Processing priority files" >&2
    for f in "${firstfiles[@]}"; do
        local filepath="${src_dir}/${f}"
        if [[ -f "$filepath" ]]; then
            append_file "$filepath" || {
                echo "ERROR: Failed to append priority file ${filepath}" >&2
                exit 1
            }
        else
            echo "WARNING: Priority file ${filepath} not found" >&2
        fi
    done

    # Append remaining files
    echo "Processing remaining files" >&2
    while IFS= read -r -d '' filepath; do
        local fn
        fn="$(basename "$filepath")"
        is_firstfile "$fn" && continue
        append_file "$filepath" || {
            echo "ERROR: Failed to append file ${filepath}" >&2
            exit 1
        }
    done < <(find "$src_dir" -type f -not -name '.*.swp' -not -name '*~' -print0 | sort -z)

    echo "Build completed successfully" >&2
}

# Execute main with error trapping
main "$@" || {
    echo "ERROR: Build process failed" >&2
    exit 1
}
