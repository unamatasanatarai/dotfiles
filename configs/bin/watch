#!/bin/bash

# Default options
interval=2
log_file=""
highlight_diffs=false

# Show usage
usage() {
  echo "Usage: $0 [-i interval] [-l log_file] [-d] <command> [args...]"
  echo ""
  echo "  -i N        Set interval in seconds (default: 2)"
  echo "  -l FILE     Log output to FILE"
  echo "  -d          Highlight differences between runs"
  echo ""
  echo "Example:"
  echo "  $0 -i 5 -d -l output.log ls -lh /tmp"
  exit 1
}

# Parse options
while getopts ":i:l:d" opt; do
  case $opt in
    i) interval="$OPTARG" ;;
    l) log_file="$OPTARG" ;;
    d) highlight_diffs=true ;;
    \?) echo "Invalid option: -$OPTARG" >&2; usage ;;
    :) echo "Option -$OPTARG requires an argument." >&2; usage ;;
  esac
done
shift $((OPTIND -1))

# Ensure command is provided
if [ $# -eq 0 ]; then
  usage
fi

# Cleanup on exit or interruption
cleanup() {
  tput cnorm    # Show cursor
  tput rmcup    # Restore screen
  rm -f "$tmp_prev" "$tmp_curr"
  exit
}
trap cleanup INT TERM EXIT

# Use alternate screen and hide cursor
tput smcup
tput civis

# Temp files for diff comparison
tmp_prev=$(mktemp)
tmp_curr=$(mktemp)

# Main loop
while true; do
  clear
  echo "[ $(date '+%Y-%m-%d %H:%M:%S') ] Running: $*"
  echo

  if $highlight_diffs; then
    "$@" > "$tmp_curr" 2>&1
    if [ -s "$tmp_prev" ]; then
      diff -u "$tmp_prev" "$tmp_curr" | while IFS= read -r line; do
        case "$line" in
          "--- "*|"+++"*)
            echo -e "\033[1;36m$line\033[0m"  # file headers (cyan)
            ;;
          "@@"*)
            echo -e "\033[1;35m$line\033[0m"  # hunk headers (magenta)
            ;;
          "+"*)
            echo -e "\033[1;32m$line\033[0m"  # additions (green)
            ;;
          "-"*)
            echo -e "\033[1;31m$line\033[0m"  # deletions (red)
            ;;
          *)
            echo "$line"
            ;;
        esac
      done
    else
      cat "$tmp_curr"
    fi
    cp "$tmp_curr" "$tmp_prev"
  else
    output=$("$@" 2>&1)
    echo "$output"
    [ -n "$log_file" ] && echo "$output" >> "$log_file"
  fi

  sleep "$interval"
done

